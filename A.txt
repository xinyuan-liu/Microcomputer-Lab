DATA SEGMENT
 
CIRB DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0
     DB 0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


CIRW DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0
     DB 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0
     DB 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
     DB 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
     DB 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0
     DB 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


PICX DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
     DB 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
     DB 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

BOARD DB 256 DUP(0)   		;0~ENPTY 1~BLACK 2~WHITE

POSX DW 0
POSY DW 0
LOCX DW 0
LOCY DW 0

PIC_INDEX DW 0
CUR_PLAYER DW 2

DATA ENDS

CODE SEGMENT 
ASSUME  CS:CODE,DS:DATA

START:
        MOV AX,DATA
        MOV DS,AX

        MOV AX,12H
        INT 10H

        CALL DRAWBOARD

        
        MOV [PIC_INDEX],3      ; 0~CLEAR 1~BLACK 2~WHITE 3~X
        CALL DRAWPIC
GET_KEY:
        MOV AH,7
        INT 21H
        CMP AL,1BH
        JE EXIT_
        CALL PARSEKEY
        JMP GET_KEY
EXIT_:
        mov ax,3
        int 10h
        mov ah,4ch
        int 21h


PARSEKEY PROC NEAR

        CMP AL,'S'
        JE KEY_S
        CMP AL,'s'
        JE KEY_S
        CMP AL,'W'
        JE KEY_W
        CMP AL,'w'
        JE KEY_W
        CMP AL,'A'
        JE KEY_A
        CMP AL,'a'
        JE KEY_A
        CMP AL,'D'
        JE KEY_D
        CMP AL,'d'
        JE KEY_D
        CMP AL,’ ‘
        JE KEY_SPACE
        JMP RET_

        

KEY_S:
        MOV [PIC_INDEX],0      ;1~BLACK 2~WHITE
        CALL DRAWPIC_B

        INC [LOCX]
        CALL JUDGE_EDGE


        JMP RET_
KEY_W:
        
        DEC [LOCX]

KEY_A:

        DEC [LOCY]
KEY_D:

        INC [LOCY]


RET_:

        RET
PARSEKEY ENDP


JUDGELEGAL PROC NEAR
        MOV AL,1
        RET
JUDGELEGAL ENDP


GET_PIC_PTR PROC NEAR
        MOV BX,[LOCX]
        SHL BX,1
        SHL BX,1
        SHL BX,1
        SHL BX,1
        
        RET
GET_PIC_PTR ENDP




DRAWPIC PROC NEAR
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI

        CALL CALCPOS
        MOV DX,[POSX]     ;0-479
        MOV CX,[POSY]     ;0-639


        MOV SI,0
        MOV DI,0
LOOP_L:
        MOV BX,SI
        SHL BX,1
        SHL BX,1
        SHL BX,1
        SHL BX,1

        ADD BX,DI

        MOV CX,[POSY]
        ADD CX,DI
        MOV DX,[POSX]
        ADD DX,SI

        CMP [PIC_INDEX],0
        JNE PIC_N0
        MOV AL,0
        JMP PIC_DONE
PIC_N0:
        CMP [PIC_INDEX],1
        JNE PIC_N1
        MOV AL,[BX+CIRB]
        JMP PIC_DONE
PIC_N1:
        CMP [PIC_INDEX],2
        JNE PIC_N2
        MOV AL,[BX+CIRW]
        JMP PIC_DONE
PIC_N2:
        CMP [PIC_INDEX],3
        JNE PIC_N3
        MOV AL,[BX+PICX]
        JMP PIC_DONE
PIC_N3:
PIC_DONE:
        TEST AL,AL
        JE EQZ_0
        MOV AL,0FH
EQZ_0:
        MOV AH,0CH
        INT 10H

        INC DI
        CMP DI,16
        JL LT16_1
        MOV DI,0
        INC SI
        CMP SI,16
        JE EQ16_1
LT16_1:
        JMP LOOP_L
EQ16_1:
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        RET
DRAWPIC ENDP

CALCPOS PROC NEAR
        PUSH DX
        PUSH AX
        MOV DX,21
        MOV AX,[LOCX]
        MUL DX
        ADD AX,53
        MOV [POSX],AX

        MOV DX,21
        MOV AX,[LOCY]
        MUL DX
        ADD AX,53
        MOV [POSY],AX

        
        POP AX
        POP DX
        RET
CALCPOS ENDP

DRAWBOARD PROC NEAR
        PUSH AX
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI
        MOV BH,0
        MOV DX,50     ;0-479
        MOV CX,50     ;0-639
LOOP_1L:
        MOV CX,50
LOOP_1R:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        ADD CX,1
        CMP CX,387
        JL LOOP_1R
        ADD DX,21
        CMP DX,387
        JL LOOP_1L

        MOV DX,50     ;0-479
        MOV CX,50     ;0-639
LOOP_2L:
        MOV DX,50
LOOP_2R:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        ADD DX,1
        CMP DX,387
        JL LOOP_2R
        ADD CX,21
        CMP CX,387
        JL LOOP_2L
        
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        POP AX
        RET


DRAWBOARD ENDP

DISPCHAR PROC NEAR

        MOV AH,0AH
        MOV AL,'A'
        MOV BH,0
        MOV BL,07H
        MOV CX,2
        INT 10H

        MOV AH,02H
        MOV DH,0
        MOV DL,0
        INT 10H

        MOV AH,0AH
        MOV AL,'A'
        MOV BH,0
        MOV BL,02H
        MOV CX,1

        INT 10H

DISPCHAR ENDP

CODE ENDS 
END START
