DATA SEGMENT
 
CIRB DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0
     DB 0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


CIRW DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0
     DB 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0
     DB 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
     DB 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
     DB 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0
     DB 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


PICX DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
     DB 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
     DB 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

BOARD DB 256 DUP(0)   		;0~ENPTY 1~BLACK 2~WHITE

TABLE_PLAYER DW 0,2,1

POSX DW 0
POSY DW 0
LOCX DW 0
LOCY DW 0

PIC_INDEX DW 0
CUR_PLAYER DW 1
CPT_PLAYER DW 1

DATA ENDS

CODE SEGMENT 
ASSUME  CS:CODE,DS:DATA

START:
        MOV AX,DATA
        MOV DS,AX
        MOV DX,0E4B9H
        MOV AL,0
        OUT DX,AL
        OUT DX,AL
        OUT DX,AL
        MOV AL,40H
        OUT DX,AL
        MOV AL,4EH
        OUT DX,AL
        MOV AL,27H
        OUT DX,AL

        MOV DX,0E483H
        MOV AL,00010100B
        OUT DX,AL

        MOV DX,0E480H
        MOV AL,52
        OUT DX,AL

        MOV AX,12H
        INT 10H
        CALL DRAWBOARD
        MOV [PIC_INDEX],3      ; 0~CLEAR 1~BLACK 2~WHITE 3~X
        CALL DRAWPIC
GET_KEY:
        MOV AX,[CUR_PLAYER]
        CMP AX,[CPT_PLAYER]
        JNE WAIT_8251
        MOV AH,7
        INT 21H

        CALL CHECK_OUT_READY
        MOV DX,0E4B8H
        OUT DX,AL

        CMP AL,1BH
        JE EXIT_
        CALL PARSEKEY
        JMP GET_KEY

WAIT_8251:
        CALL CHECK_IN_READY
        MOV DX,0E4B8H
        IN AL,DX

        CALL PARSEKEY
        JMP GET_KEY
EXIT_:
        MOV AX,3
        INT 10H
        MOV AH,4CH
        INT 21H

WIN PROC NEAR
        MOV AX,3
        INT 10H
        MOV AH,4CH
        INT 21H
WIN ENDP

CHECK_IN_READY PROC NEAR
        PUSH AX
        PUSH DX
        MOV DX,0E4B9H
LOOP_I_NOT_READY:
        IN AL,DX
        AND AL,2
        CMP AL,2
        JNE LOOP_I_NOT_READY
        POP DX
        POP AX
        RET
CHECK_IN_READY ENDP


CHECK_OUT_READY PROC NEAR
        PUSH AX
        PUSH DX
        MOV DX,0E4B9H

LOOP_O_NOT_READY:
        IN AL,DX
        AND AL,1
        CMP AL,1
        JNE LOOP_O_NOT_READY
        POP DX
        POP AX
        RET
CHECK_OUT_READY ENDP

JUDGE_WINNER PROC NEAR
        PUSH SI
        PUSH DI
        PUSH BX
        PUSH CX


        MOV SI,0
        MOV DI,0

LOOP_JUDGE_WINNER:
        MOV BX,DI
        MOV CL,4
        SHL BX,CL
        ADD BX,SI
        MOV AL,[BX+BOARD]
        MOV AH,0
        CMP AX,[CUR_PLAYER]
        JNE CONTINUE_1
        

        CMP SI,11
        JG SI_G_11
        PUSH SI
        MOV SI,0
LOOP_CHECK1:
        CMP AL,[BX+SI+BOARD]
        JNE CHECK_1_FAIL
        INC SI
        CMP SI,5
        JL LOOP_CHECK1
        MOV AL,1               ;SUCCESS
        POP SI
        JMP RET_1
CHECK_1_FAIL:
        POP SI

        CMP DI,11
        JG CONTINUE_1
        PUSH DI
        MOV DI,0
LOOP_CHECK3:
        CMP AL,[BX+DI+BOARD]
        JNE CHECK_3_FAIL
        ADD DI,17
        CMP DI,85
        JL LOOP_CHECK3
        MOV AL,1               ;SUCCESS
        POP DI
        JMP RET_1
CHECK_3_FAIL:
        POP DI


SI_G_11:
        CMP DI,11
        JG CONTINUE_1
        PUSH DI
        MOV DI,0
LOOP_CHECK2:
        CMP AL,[BX+DI+BOARD]
        JNE CHECK_2_FAIL
        ADD DI,16
        CMP DI,80
        JL LOOP_CHECK2
        MOV AL,1               ;SUCCESS
        POP DI
        JMP RET_1
CHECK_2_FAIL:
        POP DI
        
CONTINUE_1:
        INC SI
        CMP SI,16
        JL LOOP_JUDGE_WINNER
        MOV SI,0
        INC DI
        CMP DI,16
        JL LOOP_JUDGE_WINNER
        MOV AL,0
RET_1:
        POP CX
        POP BX
        POP DI
        POP SI
        RET
JUDGE_WINNER ENDP

PARSEKEY PROC NEAR
        PUSH BX
        PUSH CX
        CMP AL,'S'
        JE KEY_S
        CMP AL,'s'
        JE KEY_S
        CMP AL,'W'
        JE KEY_W
        CMP AL,'w'
        JE KEY_W
        CMP AL,'A'
        JE KEY_A
        CMP AL,'a'
        JE KEY_A
        CMP AL,'D'
        JE KEY_D
        CMP AL,'d'
        JE KEY_D
        CMP AL,' '
        JE LABEL_JMP_1
        JMP ILLEGAL

LABEL_JMP_1:
        JMP KEY_SPACE
KEY_S:
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        INC [LOCX]
        CMP [LOCX],16
        JL EDGE_L1
        MOV [LOCX],0
EDGE_L1:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_W:
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        DEC [LOCX]
        CMP [LOCX],0
        JGE EDGE_L2
        MOV [LOCX],15
EDGE_L2:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_A:  
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        DEC [LOCY]
        CMP [LOCY],0
        JGE EDGE_L3
        MOV [LOCY],15
EDGE_L3:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_D:
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        INC [LOCY]
        CMP [LOCY],16
        JL EDGE_L4
        MOV [LOCY],0
EDGE_L4:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_SPACE:
        MOV BX,[LOCX]
        MOV CL,4
        SHL BX,CL
        ADD BX,[LOCY]
        CMP [BX+BOARD],0
        JNE ILLEGAL
        MOV AX,[CUR_PLAYER]
        MOV BYTE PTR [BX+BOARD],AL
        MOV [PIC_INDEX],AX
        CALL DRAWPIC
        CALL JUDGE_WINNER
        CMP AL,1
        JNE NOT_WIN
        CALL WIN

NOT_WIN:
        CALL CHANGE_PLAYER
        JMP RET_
ILLEGAL:

RET_:
        POP CX
        POP BX
        RET
PARSEKEY ENDP

CHANGE_PLAYER PROC NEAR
        CMP [CUR_PLAYER],1
        JE LABEL_PLAYER2
        MOV [CUR_PLAYER],1
        RET
LABEL_PLAYER2:
        MOV [CUR_PLAYER],2
        RET
CHANGE_PLAYER ENDP


GET_PIC_INDEX PROC NEAR
        PUSH AX
        PUSH BX
        PUSH CX
        MOV BX,[LOCX]
        MOV CL,4
        SHL BX,CL
        ADD BX,[LOCY]
        MOV AL,[BX+BOARD]
        MOV AH,0
        MOV [PIC_INDEX],AX
        POP CX
        POP BX
        POP AX
        RET
GET_PIC_INDEX ENDP




DRAWPIC PROC NEAR
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI

        CALL CALCPOS
        MOV DX,[POSX]     ;0-479
        MOV CX,[POSY]     ;0-639


        MOV SI,0
        MOV DI,0
LOOP_L:
        MOV BX,SI
        MOV CL,4
        SHL BX,CL
        ADD BX,DI

        MOV CX,[POSY]
        ADD CX,DI
        MOV DX,[POSX]
        ADD DX,SI

        CMP [PIC_INDEX],0
        JNE PIC_N0
        MOV AL,0
        JMP PIC_DONE
PIC_N0:
        CMP [PIC_INDEX],1
        JNE PIC_N1
        MOV AL,[BX+CIRB]
        JMP PIC_DONE
PIC_N1:
        CMP [PIC_INDEX],2
        JNE PIC_N2
        MOV AL,[BX+CIRW]
        JMP PIC_DONE
PIC_N2:
        CMP [PIC_INDEX],3
        JNE PIC_N3
        MOV AL,[BX+PICX]
        JMP PIC_DONE
PIC_N3:
PIC_DONE:
        TEST AL,AL
        JE EQZ_0
        MOV AL,0FH
EQZ_0:
        MOV AH,0CH
        INT 10H

        INC DI
        CMP DI,16
        JL LT16_1
        MOV DI,0
        INC SI
        CMP SI,16
        JE EQ16_1
LT16_1:
        JMP LOOP_L
EQ16_1:
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        RET
DRAWPIC ENDP

CALCPOS PROC NEAR
        PUSH DX
        PUSH AX
        MOV DX,21
        MOV AX,[LOCX]
        MUL DX
        ADD AX,53
        MOV [POSX],AX

        MOV DX,21
        MOV AX,[LOCY]
        MUL DX
        ADD AX,53
        MOV [POSY],AX

        
        POP AX
        POP DX
        RET
CALCPOS ENDP

DRAWBOARD PROC NEAR
        PUSH AX
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI
        MOV BH,0
        MOV DX,50     ;0-479
        MOV CX,50     ;0-639
LOOP_1L:
        MOV CX,50
LOOP_1R:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        ADD CX,1
        CMP CX,387
        JL LOOP_1R
        ADD DX,21
        CMP DX,387
        JL LOOP_1L

        MOV DX,50     ;0-479
        MOV CX,50     ;0-639
LOOP_2L:
        MOV DX,50
LOOP_2R:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        ADD DX,1
        CMP DX,387
        JL LOOP_2R
        ADD CX,21
        CMP CX,387
        JL LOOP_2L
        
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        POP AX
        RET


DRAWBOARD ENDP

DISPCHAR PROC NEAR

        MOV AH,0AH
        MOV AL,'A'
        MOV BH,0
        MOV BL,07H
        MOV CX,2
        INT 10H

        MOV AH,02H
        MOV DH,0
        MOV DL,0
        INT 10H

        MOV AH,0AH
        MOV AL,'A'
        MOV BH,0
        MOV BL,02H
        MOV CX,1

        INT 10H

DISPCHAR ENDP

CODE ENDS 
END START
