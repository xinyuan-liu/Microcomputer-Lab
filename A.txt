DATA SEGMENT
 
CIRB DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0
     DB 0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


CIRW DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0
     DB 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0
     DB 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
     DB 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
     DB 0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0
     DB 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0
     DB 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0
     DB 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


PICX DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
     DB 0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0
     DB 0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
     DB 0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
     DB 0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
     DB 0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

BOARD DB 256 DUP(0)   		;0~ENPTY 1~BLACK 2~WHITE

HS_1_S DB 0
HS_1_R DB 0
HS_2_S DB 0
HS_2_R DB 0

STR_1 DB 'Connecting...',0AH,0DH,'$'
STR_2 DB 'Handshake 1 send',0AH,0DH,'$'
STR_3 DB 'Handshake 1 receive',0AH,0DH,'$'
STR_4 DB 'Handshake 2 send',0AH,0DH,'$'
STR_5 DB 'Handshake 2 receive',0AH,0DH,'$'
STR_6 DB 'Requesting for handshake 1',0AH,0DH,'$'
STR_7 DB 'Success...',0AH,0DH,'$'


POSX DW 0
POSY DW 0
LOCX DW 0
LOCY DW 0

PIC_INDEX DW 0
CUR_PLAYER DW 1
CPT_PLAYER DW 2
WINNER DW 0
DATA ENDS

CODE SEGMENT 
ASSUME  CS:CODE,DS:DATA

START:
        MOV AX,DATA
        MOV DS,AX
        MOV DX,0E4B9H
        MOV AL,0
        OUT DX,AL
        OUT DX,AL
        OUT DX,AL
        MOV AL,40H
        OUT DX,AL
        MOV AL,4EH
        OUT DX,AL
        MOV AL,27H
        OUT DX,AL

        MOV DX,0E483H
        MOV AL,00010100B
        OUT DX,AL

        MOV DX,0E480H
        MOV AL,52
        OUT DX,AL

        ;CALL CHECK_CONNECT

        MOV AX,12H
        INT 10H
        CALL DRAWBOARD
        MOV [PIC_INDEX],3      ; 0~CLEAR 1~BLACK 2~WHITE 3~X
        CALL DRAWPIC
GET_KEY:
        MOV AX,[CUR_PLAYER]
        CMP AX,[CPT_PLAYER]
        ;JNE WAIT_8251

        CALL GET_KEYBOARD
        CMP AL,0
        JE NO_KEY_HIT

        CALL CHECK_OUT_READY
        MOV DX,0E4B8H
        OUT DX,AL

        CMP AL,1BH
        JE EXIT_

        CALL PARSEKEY

NO_KEY_HIT:

        CALL AUDIO_OUTPUT
        CALL TIMER

        JMP GET_KEY

WAIT_8251:

        MOV DX,0E4B9H   ;CHECK INPUT READY-NONBLOCK
        IN AL,DX
        AND AL,2

        CMP AL,2
        JNE NO_KEY_RECEIVE

        MOV DX,0E4B8H
        IN AL,DX

        CMP AL,1BH
        JE EXIT_

        CALL PARSEKEY
NO_KEY_RECEIVE:
        CALL AUDIO_OUTPUT
        ;CALL TIMER
        JMP GET_KEY
EXIT_:
        MOV AX,3
        INT 10H
        MOV AH,4CH
        INT 21H

AUDIO_OUTPUT PROC NEAR
        RET
AUDIO_OUTPUT ENDP

TIMER PROC NEAR

        RET
TIMER ENDP

END_GAME PROC NEAR
        MOV AX,3
        INT 10H
        MOV AH,4CH
        INT 21H
END_GAME ENDP

GET_KEYBOARD PROC NEAR
        PUSH DX
        MOV DL,0
        MOV AH,01H
        INT 16H
        JZ GK_RET
        MOV DL,AL
        MOV AH,0CH
        MOV AL,0BH
        INT 21H
GK_RET:
        MOV AL,DL
        POP DX
        RET
GET_KEYBOARD ENDP


CHECK_CONNECT PROC NEAR
        PUSH AX
        PUSH DX
        PUSH CX
        MOV DX,OFFSET STR_1
        MOV AH,09H
        INT 21H
CHKCON:
        CMP [HS_1_S],1
        JE LABEL_HS1
        MOV DX,0E4B9H
        IN AL,DX
        AND AL,1
        CMP AL,1
        JNE LABEL_HS1
        MOV AL,1
        MOV DX,0E4B8H
        OUT DX,AL
        MOV [HS_1_S],1
        MOV DX,OFFSET STR_2
        MOV AH,09H
        INT 21H

LABEL_HS1:
        CMP [HS_1_R],1
        JNE LABEL_HS2
        CMP [HS_2_S],1
        JE LABEL_HS2
        MOV DX,0E4B9H
        IN AL,DX
        AND AL,1
        CMP AL,1
        JNE LABEL_HS2
        MOV AL,2
        MOV DX,0E4B8H
        OUT DX,AL
        MOV [HS_2_S],1
        MOV DX,OFFSET STR_4
        MOV AH,09H
        INT 21H

LABEL_HS2:
        MOV DX,0E4B9H
        IN AL,DX
        AND AL,2
        CMP AL,2
        JNE LABEL_HS3
        MOV DX,0E4B8H
        IN AL,DX
        CMP AL,1
        JNE LABEL_HS4
        MOV [HS_1_R],1
        MOV DX,OFFSET STR_3
        MOV AH,09H
        INT 21H

        JMP LABEL_HS3
LABEL_HS4:
        CMP AL,2
        JNE LABEL_HS5
        MOV [HS_2_R],1
        MOV DX,OFFSET STR_5
        MOV AH,09H
        INT 21H

        MOV DX,OFFSET STR_6
        MOV AH,09H
        INT 21H

        MOV AL,3
        MOV DX,0E4B8H
        OUT DX,AL
        MOV [CPT_PLAYER],1
        JMP LABEL_HS3

LABEL_HS5:
        CMP AL,3
        JNE LABEL_HS3
        MOV DX,OFFSET STR_2
        MOV AH,09H
        INT 21H

        MOV AL,1
        MOV DX,0E4B8H
        OUT DX,AL

LABEL_HS3:
        MOV AH,01H
        INT 16H
        JNZ EXIT_2
        MOV AL,[HS_2_S]
        AND AL,[HS_2_R]
        JNZ RET_2
        JMP CHKCON
RET_2:

        MOV DX,OFFSET STR_7
        MOV AH,09H
        INT 21H
        MOV DX,4240H
        MOV CX,0FH
        MOV AH,86H
        INT 15H
        POP CX
        POP DX
        POP AX
        RET
EXIT_2:

        MOV AH,4CH
        INT 21H

CHECK_CONNECT ENDP



CHECK_IN_READY PROC NEAR
        PUSH AX
        PUSH DX
        MOV DX,0E4B9H
LOOP_I_NOT_READY:
        IN AL,DX
        AND AL,2
        CMP AL,2
        JNE LOOP_I_NOT_READY
        POP DX
        POP AX
        RET
CHECK_IN_READY ENDP


CHECK_OUT_READY PROC NEAR
        PUSH AX
        PUSH DX
        MOV DX,0E4B9H

LOOP_O_NOT_READY:
        IN AL,DX
        AND AL,1
        CMP AL,1
        JNE LOOP_O_NOT_READY
        POP DX
        POP AX
        RET
CHECK_OUT_READY ENDP

JUDGE_WINNER PROC NEAR
        PUSH SI
        PUSH DI
        PUSH BX
        PUSH CX
        MOV SI,0
        MOV DI,0

LOOP_JUDGE_WINNER:
        MOV BX,DI
        MOV CL,4
        SHL BX,CL
        ADD BX,SI
        MOV AL,[BX+BOARD]
        MOV AH,0
        CMP AX,[CUR_PLAYER]
        JNE CONTINUE_1

        ;JMP DI_L_4
        CMP SI,4
        JL SI_L_4
        CMP DI,11
        JG SI_L_4
        PUSH SI
        MOV SI,0
LOOP_CHECK5:
        CMP AL,[BX+SI+BOARD]
        JNE CHECK_5_FAIL
        ADD SI,15
        CMP SI,75
        JL LOOP_CHECK5
        MOV AL,1               ;SUCCESS
        POP SI
        JMP RET_1
CHECK_5_FAIL:
        POP SI

SI_L_4:


        CMP SI,11
        JG SI_G_11
        PUSH SI
        MOV SI,0
LOOP_CHECK1:
        CMP AL,[BX+SI+BOARD]
        JNE CHECK_1_FAIL
        INC SI
        CMP SI,5
        JL LOOP_CHECK1
        MOV AL,1               ;SUCCESS
        POP SI
        JMP RET_1
CHECK_1_FAIL:
        POP SI
        


        CMP DI,11
        JG CONTINUE_1
        PUSH DI
        MOV DI,0
LOOP_CHECK3:
        CMP AL,[BX+DI+BOARD]
        JNE CHECK_3_FAIL
        ADD DI,17
        CMP DI,85
        JL LOOP_CHECK3
        MOV AL,1               ;SUCCESS
        POP DI
        JMP RET_1
CHECK_3_FAIL:
        POP DI


SI_G_11:
        CMP DI,11
        JG CONTINUE_1
        PUSH DI
        MOV DI,0
LOOP_CHECK2:
        CMP AL,[BX+DI+BOARD]
        JNE CHECK_2_FAIL
        ADD DI,16
        CMP DI,80
        JL LOOP_CHECK2
        MOV AL,1               ;SUCCESS
        POP DI
        JMP RET_1
CHECK_2_FAIL:
        POP DI
        
CONTINUE_1:
        INC SI
        CMP SI,16
        JL JUMP_BOARD_LOOP_JUDGE_WINNER
        MOV SI,0
        INC DI
        CMP DI,16
        JL JUMP_BOARD_LOOP_JUDGE_WINNER
        MOV AL,0
RET_1:
        POP CX
        POP BX
        POP DI
        POP SI
        RET
JUMP_BOARD_LOOP_JUDGE_WINNER:
        JMP LOOP_JUDGE_WINNER
JUDGE_WINNER ENDP

PARSEKEY PROC NEAR
        PUSH BX
        PUSH CX
        CMP AL,'S'
        JE KEY_S
        CMP AL,'s'
        JE KEY_S
        CMP AL,'W'
        JE KEY_W
        CMP AL,'w'
        JE KEY_W
        CMP AL,'A'
        JE KEY_A
        CMP AL,'a'
        JE KEY_A
        CMP AL,'D'
        JE KEY_D
        CMP AL,'d'
        JE KEY_D
        CMP AL,' '
        JE LABEL_JMP_1
        JMP ILLEGAL

LABEL_JMP_1:
        JMP KEY_SPACE
KEY_S:
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        INC [LOCX]
        CMP [LOCX],16
        JL EDGE_L1
        MOV [LOCX],0
EDGE_L1:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_W:
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        DEC [LOCX]
        CMP [LOCX],0
        JGE EDGE_L2
        MOV [LOCX],15
EDGE_L2:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_A:  
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        DEC [LOCY]
        CMP [LOCY],0
        JGE EDGE_L3
        MOV [LOCY],15
EDGE_L3:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_D:
        CALL GET_PIC_INDEX
        CALL DRAWPIC
        INC [LOCY]
        CMP [LOCY],16
        JL EDGE_L4
        MOV [LOCY],0
EDGE_L4:
        MOV [PIC_INDEX],3
        CALL DRAWPIC
        JMP RET_

KEY_SPACE:
        MOV BX,[LOCX]
        MOV CL,4
        SHL BX,CL
        ADD BX,[LOCY]
        CMP [BX+BOARD],0
        JNE ILLEGAL
        MOV AX,[CUR_PLAYER]
        MOV BYTE PTR [BX+BOARD],AL
        MOV [PIC_INDEX],AX
        CALL DRAWPIC
        CALL JUDGE_WINNER
        CMP AL,1
        JNE NOT_WIN
        MOV AX,[CUR_PLAYER]
        MOV [WINNER],AX
        CALL END_GAME

NOT_WIN:
        CALL CHANGE_PLAYER
        JMP RET_
ILLEGAL:

RET_:
        POP CX
        POP BX
        RET
PARSEKEY ENDP

CHANGE_PLAYER PROC NEAR
        CMP [CUR_PLAYER],1
        JE LABEL_PLAYER2
        MOV [CUR_PLAYER],1
        RET
LABEL_PLAYER2:
        MOV [CUR_PLAYER],2
        RET
CHANGE_PLAYER ENDP


GET_PIC_INDEX PROC NEAR
        PUSH AX
        PUSH BX
        PUSH CX
        MOV BX,[LOCX]
        MOV CL,4
        SHL BX,CL
        ADD BX,[LOCY]
        MOV AL,[BX+BOARD]
        MOV AH,0
        MOV [PIC_INDEX],AX
        POP CX
        POP BX
        POP AX
        RET
GET_PIC_INDEX ENDP


DRAWPIC PROC NEAR
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI

        CALL CALCPOS
        MOV DX,[POSX]     ;0-479
        MOV CX,[POSY]     ;0-639


        MOV SI,0
        MOV DI,0
LOOP_L:
        MOV BX,SI
        MOV CL,4
        SHL BX,CL
        ADD BX,DI

        MOV CX,[POSY]
        ADD CX,DI
        MOV DX,[POSX]
        ADD DX,SI


        CMP [PIC_INDEX],0
        JNE PIC_N0


        MOV AL,0
        JMP PIC_DONE
PIC_N0:
        CMP [PIC_INDEX],1
        JNE PIC_N1
        MOV AL,[BX+CIRB]
        JMP PIC_DONE
PIC_N1:
        CMP [PIC_INDEX],2
        JNE PIC_N2

        MOV AL,[BX+CIRW]
        JMP PIC_DONE
PIC_N2:
        CMP [PIC_INDEX],3
        JNE PIC_N3

        MOV AL,[BX+PICX]
        JMP PIC_DONE
PIC_N3:
PIC_DONE:
        TEST AL,AL
        JE EQZ_0
        MOV AL,0FH
EQZ_0:
        MOV AH,0CH
        INT 10H

        INC DI
        CMP DI,16
        JL LT16_1
        MOV DI,0
        INC SI
        CMP SI,16
        JE EQ16_1
LT16_1:
        JMP LOOP_L
JUMP_BOARD_RET_DRAWPIC:
        JMP RET_DRAWPIC
EQ16_1:
        CMP [PIC_INDEX],1
        JE JUMP_BOARD_RET_DRAWPIC
        CMP [LOCX],0
        JE LLL1
        MOV DX,[POSX]
        ADD DX,7
        MOV CX,[POSY]
        ADD CX,7
        MOV SI,0

LL1:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        INC SI
        DEC DX
        CMP SI,10
        JL LL1

LLL1:
        CMP [LOCY],0
        JE LLL2

        MOV DX,[POSX]
        ADD DX,7
        MOV CX,[POSY]
        ADD CX,7
        MOV SI,0

LL2:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        INC SI
        DEC CX
        CMP SI,10
        JL LL2

LLL2:
        CMP [LOCX],15
        JE LLL3

        MOV DX,[POSX]
        ADD DX,7
        MOV CX,[POSY]
        ADD CX,7
        MOV SI,0

LL3:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        INC SI
        INC DX
        CMP SI,10
        JL LL3
LLL3:
        CMP [LOCY],15
        JE LLL4

        MOV DX,[POSX]
        ADD DX,7
        MOV CX,[POSY]
        ADD CX,7
        MOV SI,0

LL4:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        INC SI
        INC CX
        CMP SI,10
        JL LL4

LLL4:


RET_DRAWPIC:
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        RET
DRAWPIC ENDP

CALCPOS PROC NEAR
        PUSH DX
        PUSH AX
        MOV DX,21
        MOV AX,[LOCX]
        MUL DX
        ADD AX,53
        MOV [POSX],AX

        MOV DX,21
        MOV AX,[LOCY]
        MUL DX
        ADD AX,53
        MOV [POSY],AX

        
        POP AX
        POP DX
        RET
CALCPOS ENDP

DRAWBOARD PROC NEAR
        PUSH AX
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI
        MOV BH,0
        MOV DX,60     ;0-479
        MOV CX,60     ;0-639
LOOP_1L:
        MOV CX,60
LOOP_1R:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        ADD CX,1
        CMP CX,376
        JL LOOP_1R
        ADD DX,21
        CMP DX,376
        JL LOOP_1L

        MOV DX,60     ;0-479
        MOV CX,60     ;0-639
LOOP_2L:
        MOV DX,60
LOOP_2R:
        MOV AL,0FH
        MOV AH,0CH
        INT 10H
        ADD DX,1
        CMP DX,376
        JL LOOP_2R
        ADD CX,21
        CMP CX,376
        JL LOOP_2L
        
        POP DI
        POP SI
        POP DX
        POP CX
        POP BX
        POP AX
        RET


DRAWBOARD ENDP


CODE ENDS 
END START
