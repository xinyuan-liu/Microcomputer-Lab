DATA SEGMENT
 

HS_1_S DB 0
HS_1_R DB 0
HS_2_S DB 0
HS_2_R DB 0

STR_1 DB 'Connecting...',0AH,0DH,'$'
STR_2 DB 'Handshake 1 send',0AH,0DH,'$'
STR_3 DB 'Handshake 1 receive',0AH,0DH,'$'
STR_4 DB 'Handshake 2 send',0AH,0DH,'$'
STR_5 DB 'Handshake 2 receive',0AH,0DH,'$'
STR_6 DB 'Requesting for handshake 1',0AH,0DH,'$'
STR_7 DB 'Success...',0AH,0DH,'$'

BUFFER DB 256 DUP(0)
ERROR_MSG DB 'ERROR!$'
FILE_PATH DB 256 DUP(0)

FILE_HANDLE DW 0
SIZE_ DB 0
TMP DB 0
MODE DB 0

DATA ENDS             

CODE SEGMENT 
ASSUME  CS:CODE,DS:DATA

START:
        MOV AX,DATA
        MOV DS,AX
        MOV DX,0E4B9H
        MOV AL,0
        OUT DX,AL
        OUT DX,AL
        OUT DX,AL
        MOV AL,40H
        OUT DX,AL
        MOV AL,4EH
        OUT DX,AL
        MOV AL,27H
        OUT DX,AL

        MOV DX,0E483H
        MOV AL,00010100B
        OUT DX,AL

        MOV DX,0E480H
        MOV AL,52         
        OUT DX,AL

        CALL CHECK_CONNECT

        CALL PARSE_ARG
        CMP [MODE],'S'
        JE MODE_S
        CMP [MODE],'r'
        JE MODE_S

        CMP [MODE],'R'
        JE MODE_R
        CMP [MODE],'r'
        JE MODE_R
        JMP ERROR

MODE_R:

        CALL CREATE_FILE
LABEL_2:
        CALL RECEIVE
        CALL WRITE_FILE
        CMP [SIZE_],64
        JE LABEL_2

        JMP EXIT_
MODE_S:
        CALL OPEN_FILE

LABEL_1:
        CALL READ_FILE
        CALL SEND

        MOV CX,0H
        MOV DX,100
        MOV AH,86H
        INT 15H

        CMP [SIZE_],64
        JE LABEL_1

        MOV BL,0FFH
        CALL BEEP
EXIT_:
        MOV AH,4CH
        INT 21H

ERROR:
        MOV DX,OFFSET ERROR_MSG
        MOV AH,09H
        INT 21H

        MOV AH,4CH
        INT 21H

RECEIVE PROC NEAR
        CALL CHECK_IN_READY
        MOV DX,0E4B8H
        IN AL,DX
        MOV [SIZE_],AL

        MOV BX,0
LOOP_RECEIVE:
        CALL CHECK_IN_READY
        MOV DX,0E4B8H
        IN AL,DX
        MOV [BUFFER+BX],AL
        INC BX
        CMP BL,[SIZE_]
        JL LOOP_RECEIVE

        MOV [BUFFER+BX],'$'
        MOV DX,OFFSET BUFFER
        MOV AH,09H
        INT 21H


        RET
RECEIVE ENDP

WRITE_FILE PROC NEAR
        MOV AH,40H
        LEA DX,BUFFER
        MOV CL,[SIZE_]  ;128
        MOV CH,0
        MOV BX,[FILE_HANDLE]
        INT 21H
        JC ERROR
        RET

WRITE_FILE ENDP

CREATE_FILE PROC NEAR

        MOV AH,3CH
        LEA DX,FILE_PATH
        MOV CX,00
        INT 21H
        JC ERROR
        MOV [FILE_HANDLE],AX
        RET
CREATE_FILE ENDP

SEND PROC NEAR
        MOV BL,[SIZE_]
        MOV BH,0
        MOV [BUFFER+BX],'$'
        ;MOV DX,OFFSET BUFFER
        ;MOV AH,09H
        ;INT 21H

        CALL CHECK_OUT_READY
        MOV DX,0E4B8H
        MOV AL,[SIZE_]
        OUT DX,AL

        MOV BX,0
LOOP_SEND:
        CALL CHECK_OUT_READY
        MOV DX,0E4B8H
        MOV AL,[BUFFER+BX]
        OUT DX,AL

        MOV DL,AL
        MOV AH,02H
        INT 21H
        INC BX
        CMP BL,[SIZE_]
        JL LOOP_SEND

        RET


SEND ENDP

JUMP_BOARD_ERROR:
        JMP ERROR
PARSE_ARG PROC NEAR
       
        MOV CL,ES:[80H]
        CMP CL,0
        JE JUMP_BOARD_ERROR
        SUB CL,3

        MOV BX,82H
        MOV AL,ES:[BX]
        MOV [MODE],AL
        INC BX
        CMP BYTE PTR ES:[BX],' '
        JNE JUMP_BOARD_ERROR
LOOP_PARSE1:
        INC BX
        CMP BYTE PTR ES:[BX],' '
        JE LOOP_PARSE1
        MOV SI,0
LOOP_PARSE2:
        MOV AL,ES:[BX+SI]
        CMP AL,' '
        JE PARSE_END
        MOV [FILE_PATH+SI],AL
        INC SI
        MOV CH,0
        CMP SI,CX
        JE PARSE_END
        JMP LOOP_PARSE2

PARSE_END:
        MOV [FILE_PATH+SI],'$'
        RET
PARSE_ARG ENDP

READ_FILE PROC NEAR
        MOV AH,3FH
        LEA DX,BUFFER
        MOV CX,64
        MOV BX,[FILE_HANDLE]
        INT 21H
        JC JUMPBOARD
        MOV [SIZE_],AL
        RET
JUMPBOARD:
        JMP ERROR
READ_FILE ENDP

OPEN_FILE PROC NEAR
        MOV AH,3DH
        MOV DX,OFFSET FILE_PATH
        MOV AL,0
        INT 21H			;OPEN
        JC JUMP_BOARD_ERROR
        MOV [FILE_HANDLE],AX
        RET
OPEN_FILE ENDP

CHECK_CONNECT PROC NEAR
        PUSH AX
        PUSH DX
        PUSH CX
        MOV DX,OFFSET STR_1
        MOV AH,09H
        INT 21H
CHKCON:
        CMP [HS_1_S],1
        JE LABEL_HS1
        MOV DX,0E4B9H
        IN AL,DX
        AND AL,1
        CMP AL,1
        JNE LABEL_HS1
        MOV AL,1
        MOV DX,0E4B8H
        OUT DX,AL
        MOV [HS_1_S],1
        MOV DX,OFFSET STR_2
        MOV AH,09H
        INT 21H

LABEL_HS1:
        CMP [HS_1_R],1
        JNE LABEL_HS2
        CMP [HS_2_S],1
        JE LABEL_HS2
        MOV DX,0E4B9H
        IN AL,DX
        AND AL,1
        CMP AL,1
        JNE LABEL_HS2
        MOV AL,2
        MOV DX,0E4B8H
        OUT DX,AL
        MOV [HS_2_S],1
        MOV DX,OFFSET STR_4
        MOV AH,09H
        INT 21H

LABEL_HS2:
        MOV DX,0E4B9H
        IN AL,DX
        AND AL,2
        CMP AL,2
        JNE LABEL_HS3
        MOV DX,0E4B8H
        IN AL,DX
        CMP AL,1
        JNE LABEL_HS4
        MOV [HS_1_R],1
        MOV DX,OFFSET STR_3
        MOV AH,09H
        INT 21H

        JMP LABEL_HS3
LABEL_HS4:
        CMP AL,2
        JNE LABEL_HS5
        MOV [HS_2_R],1
        MOV DX,OFFSET STR_5
        MOV AH,09H
        INT 21H

        CMP [HS_1_R],1
        JE LABEL_HS3

        MOV DX,OFFSET STR_6
        MOV AH,09H
        INT 21H

        MOV AL,3
        MOV DX,0E4B8H
        OUT DX,AL
        JMP LABEL_HS3

LABEL_HS5:
        CMP AL,3
        JNE LABEL_HS3
        MOV DX,OFFSET STR_2
        MOV AH,09H
        INT 21H

        MOV AL,1
        MOV DX,0E4B8H
        OUT DX,AL

LABEL_HS3:
        MOV AH,01H
        INT 16H
        JNZ EXIT_2
        MOV AL,[HS_2_S]
        AND AL,[HS_2_R]
        JNZ RET_2
        JMP CHKCON
RET_2:

        MOV DX,OFFSET STR_7
        MOV AH,09H
        INT 21H
        MOV DX,4240H
        MOV CX,0FH
        MOV AH,86H
        INT 15H
        POP CX
        POP DX
        POP AX
        RET
EXIT_2:

        MOV AH,4CH
        INT 21H

CHECK_CONNECT ENDP

CHECK_IN_READY PROC NEAR
        PUSH AX
        PUSH DX
        MOV DX,0E4B9H
LOOP_I_NOT_READY:
        IN AL,DX
        AND AL,2
        CMP AL,2
        JNE LOOP_I_NOT_READY
        POP DX
        POP AX
        RET
CHECK_IN_READY ENDP


CHECK_OUT_READY PROC NEAR
        PUSH AX
        PUSH DX
        MOV DX,0E4B9H

LOOP_O_NOT_READY:
        IN AL,DX
        AND AL,1
        CMP AL,1
        JNE LOOP_O_NOT_READY
        POP DX
        POP AX
        RET
CHECK_OUT_READY ENDP

BEEP PROC NEAR
        PUSH CX
        MOV BX,0FFFH
        MOV AL,10110110B
        OUT 43H,AL
        MOV AX,1190
        OUT 42H,AL
        MOV AL,AH
        OUT 42H,AL
        IN AL,61H
        MOV AH,AL
        OR AL,03H
        OUT 61H,AL
        MOV CX,0
L0:     LOOP L0
        DEC BX
        JNZ L0
        MOV AL,AH
        OUT 61H,AL
        POP CX
        RET
CODE ENDS 
END START
        
